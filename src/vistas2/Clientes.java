/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vistas2;

import ControladorCliente.CitasDao;
import ControladorCliente.ClienteDao;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.List;
import javax.swing.JInternalFrame;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.table.DefaultTableModel;
import modelo.EntidadCita;
import modelo.EntidadCliente;
import modelo.EntidadTipoCons;

/**
 *
 * @author moisesvelasco
 */
public class Clientes extends javax.swing.JInternalFrame {

    ClienteDao dao = new ClienteDao();
    EntidadCliente ec = new EntidadCliente();
    EntidadCita entC = new EntidadCita();
    CitasDao cDao= new CitasDao();
    DefaultTableModel modeloCliente = new DefaultTableModel();
    DefaultTableModel modeloCitas = new DefaultTableModel();
    int id;
    public Clientes() {
        initComponents();
        listarCliente();
        popupTable();
        popupTable2();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        escrito = new javax.swing.JDesktopPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaCliente = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        contacto = new javax.swing.JRadioButton();
        nombre = new javax.swing.JRadioButton();
        txtBuscar = new javax.swing.JTextField();
        btnBuscar = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaCitas = new javax.swing.JTable();
        listar = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);

        escrito.setLayout(null);

        tablaCliente.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Nombre del paciente", "Apellido Pat", "Apellido Mat", "Domicilio", "Telefono", "Fecha de registro", "inicia ", "termina", "Edad", "Sexo"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, true, true, false, true, true, true, true, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaCliente.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaClienteMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tablaCliente);
        if (tablaCliente.getColumnModel().getColumnCount() > 0) {
            tablaCliente.getColumnModel().getColumn(0).setMaxWidth(40);
            tablaCliente.getColumnModel().getColumn(1).setMaxWidth(200);
            tablaCliente.getColumnModel().getColumn(2).setMaxWidth(110);
            tablaCliente.getColumnModel().getColumn(3).setMaxWidth(110);
            tablaCliente.getColumnModel().getColumn(4).setMaxWidth(390);
            tablaCliente.getColumnModel().getColumn(5).setMaxWidth(130);
            tablaCliente.getColumnModel().getColumn(6).setMaxWidth(160);
            tablaCliente.getColumnModel().getColumn(7).setMaxWidth(160);
            tablaCliente.getColumnModel().getColumn(8).setMaxWidth(160);
            tablaCliente.getColumnModel().getColumn(9).setMaxWidth(50);
            tablaCliente.getColumnModel().getColumn(10).setMaxWidth(80);
        }

        escrito.add(jScrollPane1);
        jScrollPane1.setBounds(10, 180, 1250, 320);

        jPanel1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 3, true));

        jLabel1.setFont(new java.awt.Font("Marion", 1, 16)); // NOI18N
        jLabel1.setText("BUSCAR POR :");

        buttonGroup1.add(contacto);
        contacto.setText("CONTACTO");

        buttonGroup1.add(nombre);
        nombre.setText("NOMBRE");

        btnBuscar.setText("BUSCAR");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addComponent(contacto)
                        .addGap(18, 18, 18)
                        .addComponent(nombre))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(txtBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnBuscar)))))
                .addContainerGap(29, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(contacto)
                    .addComponent(nombre))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBuscar))
                .addContainerGap(10, Short.MAX_VALUE))
        );

        escrito.add(jPanel1);
        jPanel1.setBounds(10, 20, 420, 110);

        tablaCitas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "F O L I O.", "ID CLIENTE", "F E C H A.", "TIPO DE CONSULTA", "SALDO "
            }
        ));
        tablaCitas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaCitasMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tablaCitas);
        if (tablaCitas.getColumnModel().getColumnCount() > 0) {
            tablaCitas.getColumnModel().getColumn(0).setMaxWidth(90);
            tablaCitas.getColumnModel().getColumn(1).setMaxWidth(90);
            tablaCitas.getColumnModel().getColumn(4).setMaxWidth(70);
        }

        escrito.add(jScrollPane2);
        jScrollPane2.setBounds(620, 20, 454, 130);

        listar.setFont(new java.awt.Font("Lucida Grande", 1, 16)); // NOI18N
        listar.setText("Listar");
        listar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listarActionPerformed(evt);
            }
        });
        escrito.add(listar);
        listar.setBounds(30, 140, 120, 29);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(escrito, javax.swing.GroupLayout.DEFAULT_SIZE, 1251, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(escrito, javax.swing.GroupLayout.DEFAULT_SIZE, 631, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void popupTable(){
    JPopupMenu popup = new JPopupMenu();
    JMenuItem menu = new JMenuItem("     Eliminar Cliente   ");
    
    menu.addActionListener(new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            int fila1 = tablaCliente.getSelectedRow();
        if(fila1==-1){JOptionPane.showMessageDialog(null, "debe selecionar una fila de la tabla de citas"); }
        else{
            
          int idClien= Integer.parseInt(tablaCliente.getValueAt(fila1, 0).toString());
          
          
            EliminarCita ec = new EliminarCita();
            ec.idCli=idClien;
            centrarVentanas(ec);
          
         
          
        }
            
            limpiarTabla();
            listarCliente();
           
         }
    });
    popup.add(menu);
    tablaCliente.setComponentPopupMenu(popup);   
    }
    public void popupTable2(){
    JPopupMenu popup = new JPopupMenu();
    JMenuItem menu = new JMenuItem(" Eliminar registros de cita ");
    JMenuItem menu2 = new JMenuItem(" Ver registros de cita ");
    
    menu.addActionListener(new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            int fila1 = tablaCitas.getSelectedRow();
        if(fila1==-1){JOptionPane.showMessageDialog(null, "debe selecionar una fila de la tabla de citas"); }
        else{
            int folioC= Integer.parseInt(tablaCitas.getValueAt(fila1, 0).toString());
            EliminarCita ec = new EliminarCita();
            ec.folioElim=folioC;
            JOptionPane.showMessageDialog(null, "folio cita:"+folioC);
            centrarVentanas(ec);
        }  
         }
    });
    
    menu2.addActionListener(new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            int fila1 = tablaCitas.getSelectedRow();
        if(fila1==-1){JOptionPane.showMessageDialog(null, "debe selecionar una fila de la tabla de citas"); }
        else{
            
          int folioC= Integer.parseInt(tablaCitas.getValueAt(fila1, 0).toString());
          entC=cDao.obtenerDatosCita(folioC);//obtenemos el id del cliente por medio del folio que esta en txtFolio
          int idCl=entC.getIdCliente();//idCliente           
          Cuentas cu = new Cuentas();
          cu.folio=folioC;
          cu.idCliente=idCl;
          cu.setVisible(true);
          dispose();      
        }
            limpiarTablaCitas();
        }
    } );    
    popup.add(menu);
    popup.add(menu2);
    tablaCitas.setComponentPopupMenu(popup);   
    }
    void listarCliente(){
        try{
         
        List<EntidadCliente> lista =dao.listar();//metodo tipo list para traer todos los registros
        modeloCliente =(DefaultTableModel)tablaCliente.getModel();        
        Object[]ob = new Object[11];
        for(int i = 0;i<lista.size();i++){
            ob[0]=lista.get(i).getIdCliente();
            ob[1]=lista.get(i).getNombreCliente();
            ob[2]=lista.get(i).getApellidoPat();
            ob[3]=lista.get(i).getApellidoMat();
            ob[4]=lista.get(i).getDomicilio();
            ob[5]=lista.get(i).getContacto();
            ob[6]=lista.get(i).getFechaRegistro();
            ob[7]=lista.get(i).getFechaInicia();
            ob[8]=lista.get(i).getFechaTermina();
            ob[9]=lista.get(i).getEdad();
            ob[10]=lista.get(i).getSexo();
            
            modeloCliente.addRow(ob);
        }
        tablaCliente.setModel(modeloCliente);
        }
        catch(Exception e){ JOptionPane.showMessageDialog(this, "error en listar clientes"+e.getMessage()); }        
    } 
    void buscar(){
        
        if(nombre.isSelected()==true){
        String nombre=txtBuscar.getText();
        try{    
            EntidadCliente ec=dao.obtenerinfoNombre(nombre);
            int idCLI=ec.getIdCliente();
            
            JOptionPane.showMessageDialog(this, "id"+idCLI);
        List<EntidadCliente> lista =dao.listarUnCliente(idCLI);       
        modeloCliente =(DefaultTableModel)tablaCliente.getModel();        
        Object[]ob = new Object[10];
        for(int i = 0;i<lista.size();i++){
            ob[0]=lista.get(i).getIdCliente();
            ob[1]=lista.get(i).getNombreCliente();
            ob[2]=lista.get(i).getDomicilio();
            ob[3]=lista.get(i).getContacto();
            ob[4]=lista.get(i).getFechaRegistro();
            ob[5]=lista.get(i).getFechaInicia();
            ob[6]=lista.get(i).getFechaTermina();
            ob[7]=lista.get(i).getEdad();
            ob[8]=lista.get(i).getSexo();
            
            modeloCliente.addRow(ob);
        }
        tablaCliente.setModel(modeloCliente);
        }
        catch(Exception e){ JOptionPane.showMessageDialog(this, "error en buscar clientes"+e.getMessage()); }
        }
        
        
        if(contacto.isSelected()==true){
        String contact=txtBuscar.getText();
        try{    
            EntidadCliente ec=dao.obtenerinfoContacto(contact);
            int idCLI=ec.getIdCliente();
            
            JOptionPane.showMessageDialog(this, "id"+idCLI);
        List<EntidadCliente> lista =dao.listarUnCliente(idCLI);       
        modeloCliente =(DefaultTableModel)tablaCliente.getModel();        
        Object[]ob = new Object[10];
        for(int i = 0;i<lista.size();i++){
            ob[0]=lista.get(i).getIdCliente();
            ob[1]=lista.get(i).getNombreCliente();
            ob[2]=lista.get(i).getDomicilio();
            ob[3]=lista.get(i).getContacto();
            ob[4]=lista.get(i).getFechaRegistro();
            ob[5]=lista.get(i).getFechaInicia();
            ob[6]=lista.get(i).getFechaTermina();
            ob[7]=lista.get(i).getEdad();
            ob[8]=lista.get(i).getSexo();
            
            modeloCliente.addRow(ob);
        }
        tablaCliente.setModel(modeloCliente);
        }
        catch(Exception e){ JOptionPane.showMessageDialog(this, "error en buscar clientes"+e.getMessage()); }
        }
    }
    
     void centrarVentanas(JInternalFrame frame){
        escrito.add(frame);
        Dimension dimension=escrito.getSize();
        Dimension Dframe = frame.getSize();
        frame.setLocation((dimension.width -Dframe.height)/3,(dimension.height -Dframe.height)/3);
        frame.show();
    }
    
    
    void limpiarTabla(){
        for(int i = 0;i<modeloCliente.getRowCount();i++ ){
        modeloCliente.removeRow(i);
        i=i-1;
        }
    }
    void limpiarTablaCitas(){
        for(int i = 0;i<modeloCitas.getRowCount();i++ ){
        modeloCitas.removeRow(i);
        i=i-1;
        }
    }
    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        limpiarTabla();
        buscar();
        txtBuscar.setText("");
    }//GEN-LAST:event_btnBuscarActionPerformed

    private void listarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listarActionPerformed
        limpiarTabla();
        listarCliente();
    }//GEN-LAST:event_listarActionPerformed

    private void tablaCitasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaCitasMouseClicked
        
    }//GEN-LAST:event_tablaCitasMouseClicked

    private void tablaClienteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaClienteMouseClicked
        // TODO add your handling code here:
        limpiarTablaCitas();
        int fila = tablaCliente.getSelectedRow();
        if(fila==-1){JOptionPane.showMessageDialog(this, "debe selecionar una fila"); }
        else{
            try {
                id = Integer.parseInt(tablaCliente.getValueAt(fila, 0).toString());

                int tps;//tipo consulta
                EntidadTipoCons etp;
                String ntps;
                               
                 List<EntidadCita> lista =cDao.listarCitas(id);
                 modeloCitas =(DefaultTableModel)tablaCitas.getModel();        
                 Object[]ob = new Object[10];
                 for(int i = 0;i<lista.size();i++){
                 ob[0]=lista.get(i).getFolio();
                 ob[1]=lista.get(i).getIdCliente();
                 ob[2]=lista.get(i).getFechaCita();
                 tps=lista.get(i).getTipoConsulta();
                 etp=cDao.obtenerNomTipoCons(tps);
                 ntps=etp.getNombreConsulta();
                 ob[3]=ntps;
                 ob[4]=lista.get(i).getSaldo();
                 modeloCitas.addRow(ob);
                }
                 tablaCitas.setModel(modeloCitas);
               
            } catch (Exception e) { JOptionPane.showMessageDialog(this, "ERROR EN LISTAR CITAS"+e.getMessage()); 
            }

        }
    }//GEN-LAST:event_tablaClienteMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBuscar;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JRadioButton contacto;
    private javax.swing.JDesktopPane escrito;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton listar;
    private javax.swing.JRadioButton nombre;
    public static javax.swing.JTable tablaCitas;
    private javax.swing.JTable tablaCliente;
    private javax.swing.JTextField txtBuscar;
    // End of variables declaration//GEN-END:variables
}
